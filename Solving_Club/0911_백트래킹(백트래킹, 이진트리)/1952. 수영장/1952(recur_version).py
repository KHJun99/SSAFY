# [모의 SW 역량 테스트] 수영장
"""
## [문제 요약]

- 김 프로는 1년 동안 수영장을 이용할 계획을 세우려 한다.
- 수영장은 여러 종류의 이용권을 판매하며, 이용 계획(각 달에 수영장을 이용할 일수)이 주어졌을 때
- **가장 적은 비용으로 수영장을 이용할 수 있는 방법**을 찾아야 한다.

## [이용권 종류]

- **1일 이용권**: 하루 이용 가능.
- **1달 이용권**: 한 달 동안 무제한 이용 가능 (해당 월 1일부터 시작).
- **3달 이용권**: 3개월 연속 무제한 이용 가능 (예: 11월부터 사용하면 11,12,1월 이용 가능).
- **1년 이용권**: 1년 전체(1월~12월) 무제한 이용 가능.

## [예시 정리]

- 이용권 가격:
    - 1일권 10원
    - 1달권 40원
    - 3달권 100원
    - 1년권 300원
- 이용 계획: 총 17일 (표에서 주어진 월별 일수 합)
- 가능한 경우들:
    1. 전부 1일권 → 170원
    2. 일부 1달권 + 1일권 혼합 → 160원
    3. 3달권 1개 + 나머지 1달권 2개 → 120원
    4. 3달권 2개 + 1달권 2개 → 110원 ✅ (최소 비용)
    5. 1년권 1개 → 300원

👉 따라서 **정답 = 110원**

## [목표]

- 모든 달의 이용 계획을 충족하면서
- **최소 비용**으로 수영장을 이용하는 방법을 찾고, 그 비용을 출력.

## [접근 방법]

1. 4개의 경우를 모두 확인한다.
2. 각 달마다 최소 비용을 구하는 식을 구한다.
    - 1월 : 1일 이용권 x 30일  vs 1달 이용권
    - 2월 : 1월 최소 가격 + (1일 이용권 x 30일 vs 1달 이용권)
    - 3월 이후
        - 후보 1 : 3달 이용권
        - 후보 2 : 2월까지의 최소 가격 + (1일 이용권 x 30일)
        - 후보 3 : 2월까지의 최소 가격 + 1달 이용권
"""
import sys
sys.stdin = open('sample_input.txt', 'r')


# 종료 조건 : 12월을 모두 고려한 경우
# 가지의 수 : 4개 (1일, 1달, 3달, 1년)
def recur(month, total_cost):
    global min_answer
    if month > 12:
        # 최소값 갱신
        min_answer = min(min_answer, total_cost)
        return

    # 1일권으로 다 사는 경우
    recur(month + 1, total_cost + (days[month] * cost_day))
    # 1달권으로 다 사는 경우
    recur(month + 1, total_cost + cost_month)
    # 3달권으로 다 사는 경우
    recur(month + 3, total_cost + cost_month3)
    # 1년 이용권으로 사는 경우
    recur(month + 12, total_cost + cost_year)


T = int(input())
for tc in range(1, T + 1):
    # 이용권 가격들 (1일, 1달, 3달, 1년)
    cost_day, cost_month, cost_month3, cost_year = map(int, input().split())
    # 12개월 이용 게획 (1부터 사용)
    days = [0] + list(map(int, input().split()))

    min_answer = 31 * 12 * 3000         # 최대 금액 (31일 * 12개월 * 3000원)
    recur(1, 0)         # 1월 부터 시작
    print(f'#{tc} {min_answer}')